// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.

    Mux16(a=false , b=instruction , sel=instruction[15] , out[0]=j3,out[1]=j2,out[2]=j1,out[3]=d3,out[4]=d2,out[5]=d1,out[6]=c6,out[7]=c5,out[8]=c4,out[9]=c3,out[10]=c2,out[11]=c1,out[12]=a );

    //Register A
    Mux16(a=instruction , b=aluOut , sel=instruction[15] , out=aIn );
    //load instruction[5]
    Not(in=instruction[15] , out=isAIns );
    Or(a=isAIns , b=d1 , out=loadA );
    Register(in=aIn , load=loadA , out=aluInRegisA,out[0..14]=addressM, out=pcIn );
    //end of Register A



    //Register D
    //load instruction[4]
    And(a=d2 , b=instruction[15] , out=loadD );
    Register(in=aluOut , load=loadD , out=aluInRegisD );
    //end of Register A

    //REGISTER M
    //load instruction[3]
    //inM


    //ALU
    //13 bits instruction
    //0 to 2 jump instructions
    //3 to 5 destination instruction
    //
    //instruction[12] determines sources of operands 0 for A(x) and D(y) , 1 for M(x) and D(y)
    Mux16(a=aluInRegisA , b=inM , sel=a , out=aluIn );
    ALU(x=aluInRegisD , y=aluIn , zx=c1 , nx=c2 , zy=c3 , ny=c4 , f=c5 , no=c6 , out=aluOut , out=outM, zr=zeroFlag , ng=negativeFlag );
    //JGT Not(Or(zeroFlag,negativeFlag))
    //JEQ zeroFlag 1
    //JGE JEQ || negative flag 0
    //JLT negative flag 1
    //JNE Not(JEQ)
    //JLE JEQ || JLT


    //JGT
    Or(a=zeroFlag , b=negativeFlag , out=orZN );
    Not(in=orZN , out=JGT );
    ////

    //JEQ
    And(a=zeroFlag , b=true , out=JEQ );
    ////

    //JGE
    Not(in=JLT , out=nJLT );
    Or(a=JEQ , b=nJLT , out=JGE );
    ////

    //JLT
    And(a=negativeFlag , b=true , out=JLT );
    ////

    //JNE
    Not(in=JEQ , out=JNE );
    ////

    //JLE
    Or(a=JEQ , b=JLT , out= JLE);
    ////

    //TODO: check the jump instructions
    //PC load bit
    Mux8Way16(a[15]=false ,b[15]=JGT, c[15]=JEQ, d[15]=JGE, e[15]=JLT, f[15]=JNE,g[15]=JLE ,h[15]=true, sel[0]=j3, sel[1]=j2, sel[2]=j1 , out[15]=pcLoad );
    ////

    //PC
    PC(in=pcIn , load=pcLoad , inc=true , reset=reset , out[0..14]=pc );
    ////

    //writeM
    And(a=d3 , b=instruction[15] , out=writeM );

    //when A everything going to the ALU should be zereod out
    //load bits should be zero for Register D and M

}
