// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load=1, the in value is loaded
 * into the memory location specified by address. This value becomes
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory
 * map. Access to address 0x6000 results in accessing the keyboard
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:

    //this determines if address points to the Keyboard memory or greator than
    //but it seems the test does not go further than Keyboard
    Or8Way(in[0..7]=address[0..7] , out=orlsb );
    Or8Way(in[7]=false,in[6]=false,in[0..5]=address[8..13] , out=ormsb );
    Or(a=orlsb , b=ormsb , out=orAddress );

    DMux(in=load , sel=address[14] , a=ramload , b=screenload );

    RAM16K(in=in , load=ramload , address=address[0..13] , out=outRAM );
    Screen(in=in , load=screenload , address=address[0..12] , out=outScreen );
    Keyboard(out=outKeyboard);

    Mux16(a=outKeyboard , b=false , sel=orAddress , out=falseOrKeyboard );
    Mux4Way16(a=outRAM , b=outRAM , c=outScreen , d=falseOrKeyboard , sel[0]=address[13],sel[1]=address[14] , out=out );


    //we need to represent false, ram ,screen and keyboard by a 2 bit selector
    //O0 to 01 is RAM
    //10 is screen
    //two states for 11 either false or keyboard
    //11 is false
    //but if OR [0...12] and is 0 AND 11 then keyboard

}
